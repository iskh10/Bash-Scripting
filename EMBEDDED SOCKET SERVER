#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 8080  // Port to listen on

// Function to handle client connections
void handle_client(int client_socket) {
    char buffer[1024];
    int bytes_read;

    // Send welcome message to client
    char *welcome_message = "Hello from the server!\n";
    send(client_socket, welcome_message, strlen(welcome_message), 0);

    // Read client messages
    while ((bytes_read = recv(client_socket, buffer, sizeof(buffer) - 1, 0)) > 0) {
        buffer[bytes_read] = '\0';  // Null terminate the received data
        printf("Received from client: %s\n", buffer);

        // Echo the message back to the client
        send(client_socket, buffer, bytes_read, 0);
    }

    if (bytes_read == 0) {
        printf("Client disconnected.\n");
    } else if (bytes_read == -1) {
        perror("recv failed");
    }

    // Close the client socket
    close(client_socket);
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_size;
    char *ip_address = "127.0.0.1";  // Localhost IP address

    // Create socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr(ip_address);

    // Bind the socket to the specified port and IP address
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, 3) < 0) {
        perror("Listen failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on %s:%d...\n", ip_address, PORT);

    addr_size = sizeof(client_addr);
    while ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_size)) > 0) {
        printf("Connection established with client: %s\n", inet_ntoa(client_addr.sin_addr));
        
        // Handle the client in a separate function
        handle_client(client_socket);
    }

    if (client_socket < 0) {
        perror("Accept failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    // Close the server socket
    close(server_socket);
    return 0;
}

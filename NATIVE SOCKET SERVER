#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 8080   // Port to listen on
#define BACKLOG 5   // Number of pending connections in the queue

void handle_client(int client_sock) {
    char buffer[1024];
    int read_size;

    // Send a greeting message to the client
    char *message = "Welcome to the server!\n";
    send(client_sock, message, strlen(message), 0);

    // Receive a message from the client
    while ((read_size = recv(client_sock, buffer, sizeof(buffer), 0)) > 0) {
        buffer[read_size] = '\0'; // Null terminate the received message
        printf("Received: %s\n", buffer);
        
        // Send the message back to the client (echo server)
        send(client_sock, buffer, strlen(buffer), 0);
    }

    if (read_size == 0) {
        printf("Client disconnected\n");
    } else if (read_size == -1) {
        perror("recv failed");
    }

    // Close the client socket
    close(client_sock);
}

int main() {
    int server_fd, client_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket failed");
        return -1;
    }

    // Setup server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY; // Accept connections from any IP address
    server_addr.sin_port = htons(PORT); // Convert port to network byte order

    // Bind socket to address and port
    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        return -1;
    }

    // Listen for incoming connections
    if (listen(server_fd, BACKLOG) < 0) {
        perror("Listen failed");
        return -1;
    }

    printf("Server is listening on port %d...\n", PORT);

    // Accept incoming client connections
    while ((client_sock = accept(server_fd, (struct sockaddr *)&client_addr, &client_len)) >= 0) {
        printf("Client connected: %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
        
        // Handle the client in a separate function
        handle_client(client_sock);
    }

    if (client_sock < 0) {
        perror("Accept failed");
        return -1;
    }

    // Close the server socket
    close(server_fd);
    return 0;
}
